# Production Docker Compose Configuration
# Compatible with Docker Compose v1.x and v2.x
# Uses pre-built images instead of building from source

services:
  # DX Cluster API Server
  dx-api:
    image: dx-cluster-api:latest  # Use your pre-built image
    container_name: dx-cluster-api
    ports:
      - "8080:8080"
    environment:
      - PGHOST=${PGHOST}
      - PGDATABASE=${PGDATABASE}
      - PGUSER=${PGUSER}
      - PGPASSWORD=${PGPASSWORD}
      - PGPORT=${PGPORT}
      - FLASK_ENV=production
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - dx-network
    depends_on:
      - postgres-check
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dx-api.rule=Host(`api.dx.local`)"
      - "traefik.http.services.dx-api.loadbalancer.server.port=8080"

  # DX Cluster Web Dashboard
  dx-web:
    image: dx-cluster-web:latest  # Use your pre-built image
    container_name: dx-cluster-web
    ports:
      - "8050:8050"
    environment:
      - PGHOST=${PGHOST}
      - PGDATABASE=${PGDATABASE}
      - PGUSER=${PGUSER}
      - PGPASSWORD=${PGPASSWORD}
      - PGPORT=${PGPORT}
      - DASH_ENV=production
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - dx-network
    depends_on:
      - postgres-check
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dx-web.rule=Host(`dashboard.dx.local`)"
      - "traefik.http.services.dx-web.loadbalancer.server.port=8050"

  # Database connectivity check service
  postgres-check:
    image: postgres:15-alpine
    container_name: dx-postgres-check
    environment:
      - PGHOST=${PGHOST}
      - PGDATABASE=${PGDATABASE}
      - PGUSER=${PGUSER}
      - PGPASSWORD=${PGPASSWORD}
      - PGPORT=${PGPORT}
    command: >
      sh -c "
        until pg_isready -h $${PGHOST} -p $${PGPORT} -U $${PGUSER}; do
          echo 'Waiting for PostgreSQL...'
          sleep 2
        done
        echo 'PostgreSQL is ready!'
      "
    networks:
      - dx-network

  # Optional: Reverse proxy with Traefik
  traefik:
    image: traefik:v2.10
    container_name: dx-traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8888:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - dx-network
    profiles:
      - proxy

networks:
  dx-network:
    driver: bridge

# Volume for optional data persistence
volumes:
  dx-data:
    driver: local